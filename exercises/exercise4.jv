pipeline TemperaturePipeline{
    TemperatureExtractor
        ->TemperatureZipInterpreter
        ->TemperatureFilePicker
        ->TemperatureTextFileInterpreter
        ->TemperatureCSVInterpreter
        ->TemperatureCellWriter
        ->TemperatureCellWriter2
        ->TemperatureTableInterpreter
        ->TemperatureToFahrenheitTransformer
        ->BatteryToFahrenheitTransformer
        ->TemperatureLoader;

    block TemperatureCellWriter oftype CellWriter{
        at: range A1:E1;
        write: ["id", "producer","model","month","temperature"];
    }

    block TemperatureToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: CtF;
    }

    block BatteryToFahrenheitTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: CtF;
    }

    transform CtF {
        from Celsius oftype decimal;
        to Fahrenheit oftype decimal;
        Fahrenheit: (Celsius * 9/5) + 32;
    }

    block TemperatureCellWriter2 oftype CellWriter{
        at: cell J1;
        write:["battery_temperature"];
    }

    block TemperatureTableInterpreter oftype TableInterpreter{
        columns: [
            "id" oftype PositiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    valuetype PositiveInteger oftype integer{
        constraints: [PositiveScale];
    }

    block TemperatureTextFileInterpreter oftype TextFileInterpreter{}

    block TemperatureExtractor oftype HttpExtractor{
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block TemperatureFilePicker oftype FilePicker{
        path: "./data.csv";
    }

    block TemperatureCSVInterpreter oftype CSVInterpreter{
        delimiter: ";";
    }

    block TemperatureZipInterpreter oftype ArchiveInterpreter{
        archiveType: "zip";
    }

    block TemperatureLoader oftype SQLiteLoader{
        table: "temperatures";
        file: "temperatures.sqlite";
    }

    constraint PositiveScale oftype RangeConstraint {
        lowerBound: 0;
        lowerBoundInclusive: false;
    }

}